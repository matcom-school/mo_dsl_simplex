// DEF => FUNC OR CALLING OBJECTS, DEPENDENCIES => attr

Let N : { x | x in Naturals }; 
Let X : { x | x in Variables }; 
Let R : { X | X in Reals };  

Let NPlus : { x | x in N, x > 0  };  

Let Matrix : { M | M in (R^n)^m, n,m in N }; // OBJECT: Is defined M.n and M.m

Let A in Matrix,                                     
  Def transposed like transposed(A) = ATransposed | AtTransposed[i,j] = A[j,i], 
    i,j in N, i <= A.n, j <= A.m;  // => FUNC: ATransposed(A in Matrix)

Let n in N, c in R^n and x in X^n 
  Def LinealEq like transposed(c) * x // => OBJECT: LE.n, LE.c, LE.x

Let A in Matrix(n,m), x in X^A.n, b in R^A.n
  Def SystemEq like A*x=b; // => OBJECT: SE.A, SE.x SE.b

Let Axb is SystemEq, ctx is LinealEq
  Def LOP like x | x in R^ctx.n, x > 0, x = ctx.x = Axb.x,  min(ctx), Axb,   

